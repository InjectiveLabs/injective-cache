// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/InjectiveLabs/injective-cache (interfaces: SimpleCache)

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSimpleCache is a mock of SimpleCache interface.
type MockSimpleCache struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleCacheMockRecorder
}

// MockSimpleCacheMockRecorder is the mock recorder for MockSimpleCache.
type MockSimpleCacheMockRecorder struct {
	mock *MockSimpleCache
}

// NewMockSimpleCache creates a new mock instance.
func NewMockSimpleCache(ctrl *gomock.Controller) *MockSimpleCache {
	mock := &MockSimpleCache{ctrl: ctrl}
	mock.recorder = &MockSimpleCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleCache) EXPECT() *MockSimpleCacheMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockSimpleCache) Clear(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockSimpleCacheMockRecorder) Clear(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSimpleCache)(nil).Clear), arg0)
}

// Del mocks base method.
func (m *MockSimpleCache) Del(arg0 context.Context, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockSimpleCacheMockRecorder) Del(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockSimpleCache)(nil).Del), varargs...)
}

// Get mocks base method.
func (m *MockSimpleCache) Get(arg0 context.Context, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSimpleCacheMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSimpleCache)(nil).Get), arg0, arg1, arg2)
}

// Set mocks base method.
func (m *MockSimpleCache) Set(arg0 context.Context, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockSimpleCacheMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSimpleCache)(nil).Set), arg0, arg1, arg2)
}

// SetWithTTL mocks base method.
func (m *MockSimpleCache) SetWithTTL(arg0 context.Context, arg1, arg2 interface{}, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithTTL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithTTL indicates an expected call of SetWithTTL.
func (mr *MockSimpleCacheMockRecorder) SetWithTTL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithTTL", reflect.TypeOf((*MockSimpleCache)(nil).SetWithTTL), arg0, arg1, arg2, arg3)
}
